// LibreTranslate API - Free & Open Source Translation with fallback
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }
  
  const { texts, target } = req.body;
  if (!texts || !target) {
    return res.status(400).json({ error: 'Missing texts or target language' });
  }

  // Map language codes to LibreTranslate format
  const languageMap = {
    'hi': 'hi',    // Hindi
    'ml': 'en',    // Malayalam fallback to English (limited support)
    'ta': 'en',    // Tamil fallback to English (limited support)
    'te': 'en',    // Telugu fallback to English (limited support)
    'en': 'en'     // English
  };

  const targetLang = languageMap[target] || 'en';
  
  // If target is English, return original texts
  if (targetLang === 'en') {
    return res.status(200).json({ translations: texts });
  }

  // If target is Hindi, use pre-built translations
  if (target === 'hi') {
    const hindiTranslations = {
      heroTitle: "рдХреЗрд░рд▓ рдХрд┐рд╕рд╛рдиреЛрдВ рдХрд╛ AI рд╕рд╣рд╛рдпрдХ",
      heroDesc: "AI рджреНрд╡рд╛рд░рд╛ рд╕рдВрдЪрд╛рд▓рд┐рдд рддрддреНрдХрд╛рд▓, рдмреБрджреНрдзрд┐рдорд╛рди рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛ рдореЗрдВ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ рдФрд░ рдХреЗрд░рд▓ рдХреА рдЕрдиреВрдареА рдХреГрд╖рд┐ рдкрд░рд┐рд╕реНрдерд┐рддрд┐рдпреЛрдВ рдХреЗ рд▓рд┐рдП рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рдорд╛рдзрд╛рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред",
      cta: "рдкреНрд░рд╢реНрди рдкреВрдЫрдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ тЖТ",
      whyTitle: "рдХреЗрд░рд╛ рдлрд╛рд░реНрдо рдорд┐рддреНрд░ рдХреНрдпреЛрдВ рдЪреБрдиреЗрдВ?",
      whyDesc: "рдЙрдиреНрдирдд AI рддрдХрдиреАрдХ рдкрд╛рд░рдВрдкрд░рд┐рдХ рдХреЗрд░рд▓ рдХреГрд╖рд┐ рдЬреНрдЮрд╛рди рд╕реЗ рдорд┐рд▓рдХрд░ рдЖрдкрдХреЛ рд╕рд░реНрд╡реЛрддреНрддрдо рдХреГрд╖рд┐ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рджрд╛рди рдХрд░рддреА рд╣реИред",
      multiLang: "рдмрд╣реБ-рднрд╛рд╖рд╛ рд╕рдорд░реНрдерди",
      askTitle: "рдЕрдкрдирд╛ рдХреГрд╖рд┐ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ",
      askDesc: "рд╣рдорд╛рд░рд╛ AI рд╕рд╣рд╛рдпрдХ рдХрд┐рд╕реА рднреА рдХреГрд╖рд┐ рд╕рдВрдмрдВрдзреА рдкреНрд░рд╢реНрди рдореЗрдВ рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИ",
      aiAnswer: "AI рдЙрддреНрддрд░:",
      techTitle: "AI рдХреЗ рд╕рд╛рде рдХреЗрд░рд▓ рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рд╕рд╢рдХреНрдд рдмрдирд╛рдирд╛",
      techDesc: "рд╣рдорд╛рд░рд╛ AI рд╕рд╣рд╛рдпрдХ рдЕрддреНрдпрд╛рдзреБрдирд┐рдХ рддрдХрдиреАрдХ рдХреЛ рдХреЗрд░рд▓ рдХреА рдХреГрд╖рд┐ рдкреНрд░рдерд╛рдУрдВ рдХреЗ рдЧрд╣рд░реЗ рдЬреНрдЮрд╛рди рдХреЗ рд╕рд╛рде рдЬреЛрдбрд╝рддрд╛ рд╣реИред рдкрд╛рд░рдВрдкрд░рд┐рдХ рдЦреЗрддреА рдХреЗ рддрд░реАрдХреЛрдВ рд╕реЗ рд▓реЗрдХрд░ рдЖрдзреБрдирд┐рдХ рддрдХрдиреАрдХреЛрдВ рддрдХ, рд╣рдо рдЖрдкрдХреА рд╕рднреА рдЦреЗрддреА рдХреА рдЬрд░реВрд░рддреЛрдВ рдХреЗ рд▓рд┐рдП рд╡реНрдпрд╛рдкрдХ рд╕рд╣рд╛рдпрддрд╛ рдкреНрд░рджрд╛рди рдХрд░рддреЗ рд╣реИрдВред",
      cropGuidance: "рдХреЗрд░рд▓ рдХреА рдЬрд▓рд╡рд╛рдпреБ рдХреЗ рд▓рд┐рдП рдлрд╕рд▓-рд╡рд┐рд╢рд┐рд╖реНрдЯ рдорд╛рд░реНрдЧрджрд░реНрд╢рди",
      support: "24/7 AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рд╕рдорд░реНрдерди",
      multiLangFeature: "рдмрд╣реБ-рднрд╛рд╖рд╛ рд╕рдВрдЪрд╛рд░",
      built: "рдХреЗрд░рд▓ рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП ЁЯТЪ рдХреЗ рд╕рд╛рде рдмрдирд╛рдпрд╛ рдЧрдпрд╛ | рд╣реИрдХрдереЙрди 2024",
      empower: "рдХреГрддреНрд░рд┐рдо рдмреБрджреНрдзрд┐рдорддреНрддрд╛ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдХреГрд╖рд┐ рдХреЛ рд╕рд╢рдХреНрдд рдмрдирд╛рдирд╛",
      copyright: "┬й 2024 рдХреЗрд░рд╛ рдлрд╛рд░реНрдо рдорд┐рддреНрд░ред рд╕рднреА рдЕрдзрд┐рдХрд╛рд░ рд╕реБрд░рдХреНрд╖рд┐рддред"
    };
    
    return res.status(200).json({ translations: hindiTranslations });
  }

  // For Malayalam, add basic translations
  if (target === 'ml') {
    const malayalamTranslations = {
      heroTitle: "р┤Хр╡Зр┤░р┤│ р┤Хр╡╝р┤╖р┤Хр┤░р╡Бр┤Яр╡Ж AI р┤╕р┤╣р┤╛р┤пр┤┐",
      heroDesc: "AI р┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤┐р┤Ър╡Нр┤Ъ р┤др╡╜р┤Хр╡Нр┤╖р┤г, р┤мр╡Бр┤жр╡Нр┤зр┤┐р┤кр┤░р┤ор┤╛р┤п р┤Хр╡Гр┤╖р┤┐ р┤Йр┤кр┤жр╡Зр┤╢р┤В р┤ир╡Зр┤Яр╡Бр┤Х. р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Зр┤╖р╡Нр┤Я р┤нр┤╛р┤╖р┤пр┤┐р╡╜ р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛ р┤Ър╡Лр┤жр┤┐р┤Ър╡Нр┤Ър╡Н р┤Хр╡Зр┤░р┤│р┤др╡Нр┤др┤┐р┤ир╡Нр┤▒р╡Ж р┤Ер┤жр╡Нр┤╡р┤┐р┤др╡Ар┤п р┤Хр┤╛р╡╝р┤╖р┤┐р┤Х р┤╕р┤╛р┤╣р┤Ър┤░р╡Нр┤пр┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр┤╛р┤пр┤┐ р┤╡р╡Нр┤пр┤Хр╡Нр┤др┤┐р┤Чр┤д р┤кр┤░р┤┐р┤╣р┤╛р┤░р┤Щр╡Нр┤Щр╡╛ р┤╕р╡Нр┤╡р╡Ар┤Хр┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.",
      cta: "р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛ р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤др╡Бр┤Яр┤Щр╡Нр┤Щр╡Бр┤Х тЖТ",
      whyTitle: "р┤Ор┤ир╡Нр┤др╡Бр┤Хр╡Кр┤гр╡Нр┤Яр╡Н р┤Хр╡Зр┤░ р┤лр┤╛р┤В р┤ор┤┐р┤др╡Нр┤░ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр┤гр┤В?",
      whyDesc: "р┤╡р┤┐р┤Хр┤╕р┤┐р┤д AI р┤╕р┤╛р┤Щр╡Нр┤Хр╡Зр┤др┤┐р┤Х р┤╡р┤┐р┤жр╡Нр┤п р┤кр┤░р┤ор╡Нр┤кр┤░р┤╛р┤Чр┤д р┤Хр╡Зр┤░р┤│ р┤Хр╡Гр┤╖р┤┐ р┤Ьр╡Нр┤Юр┤╛р┤ир┤╡р╡Бр┤ор┤╛р┤пр┤┐ р┤Ър╡Зр╡╝р┤ир╡Нр┤ир╡Н р┤ир┤┐р┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Н р┤Пр┤▒р╡Нр┤▒р┤╡р╡Бр┤В р┤ор┤┐р┤Хр┤Ър╡Нр┤Ъ р┤Хр┤╛р╡╝р┤╖р┤┐р┤Х р┤ор┤╛р╡╝р┤Чр╡Нр┤Чр┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤В р┤ир╡╜р┤Хр╡Бр┤ир╡Нр┤ир╡Б.",
      multiLang: "р┤мр┤╣р╡Бр┤нр┤╛р┤╖ р┤кр┤┐р┤ир╡Нр┤др╡Бр┤г",
      askTitle: "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Хр╡Гр┤╖р┤┐ р┤Ър╡Лр┤жр╡Нр┤пр┤В р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
      askDesc: "р┤Пр┤др╡Кр┤░р╡Б р┤Хр╡Гр┤╖р┤┐р┤пр╡Бр┤ор┤╛р┤пр┤┐ р┤мр┤ир╡Нр┤зр┤кр╡Нр┤кр╡Жр┤Яр╡Нр┤Я р┤Ер┤ир╡Нр┤╡р╡Зр┤╖р┤гр┤др╡Нр┤др┤┐р┤▓р╡Бр┤В р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Ж р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Юр┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж AI р┤╕р┤╣р┤╛р┤пр┤┐ р┤др┤пр╡Нр┤пр┤╛р┤▒р┤╛р┤гр╡Н",
      aiAnswer: "AI р┤Йр┤др╡Нр┤др┤░р┤В:",
      techTitle: "AI р┤Йр┤кр┤пр╡Лр┤Чр┤┐р┤Ър╡Нр┤Ър╡Н р┤Хр╡Зр┤░р┤│ р┤Хр╡╝р┤╖р┤Хр┤░р╡Ж р┤╢р┤╛р┤Хр╡Нр┤др╡Ар┤Хр┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б",
      techDesc: "р┤Юр┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж AI р┤╕р┤╣р┤╛р┤пр┤┐ р┤Ер┤др╡Нр┤пр┤╛р┤зр╡Бр┤ир┤┐р┤Х р┤╕р┤╛р┤Щр╡Нр┤Хр╡Зр┤др┤┐р┤Х р┤╡р┤┐р┤жр╡Нр┤пр┤пр╡Ж р┤Хр╡Зр┤░р┤│р┤др╡Нр┤др┤┐р┤ир╡Нр┤▒р╡Ж р┤Хр┤╛р╡╝р┤╖р┤┐р┤Х р┤░р╡Ар┤др┤┐р┤Хр┤│р╡Жр┤Хр╡Нр┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Бр┤│р╡Нр┤│ р┤Жр┤┤р┤др╡Нр┤др┤┐р┤▓р╡Бр┤│р╡Нр┤│ р┤Ер┤▒р┤┐р┤╡р╡Бр┤ор┤╛р┤пр┤┐ р┤╕р┤Вр┤пр╡Лр┤Ьр┤┐р┤кр╡Нр┤кр┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б.",
      cropGuidance: "р┤Хр╡Зр┤░р┤│р┤др╡Нр┤др┤┐р┤ир╡Нр┤▒р╡Ж р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤пр╡Нр┤Хр╡Нр┤Хр╡Бр┤│р╡Нр┤│ р┤╡р┤┐р┤│-р┤ир┤┐р╡╝р┤жр╡Нр┤жр┤┐р┤╖р╡Нр┤Я р┤ор┤╛р╡╝р┤Чр╡Нр┤Чр┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤В",
      support: "24/7 AI-р┤кр╡Нр┤░р┤╡р╡╝р┤др╡Нр┤др┤┐р┤д р┤кр┤┐р┤ир╡Нр┤др╡Бр┤г",
      multiLangFeature: "р┤мр┤╣р╡Бр┤нр┤╛р┤╖ р┤Жр┤╢р┤пр┤╡р┤┐р┤ир┤┐р┤ор┤пр┤В",
      built: "р┤Хр╡Зр┤░р┤│ р┤Хр╡╝р┤╖р┤Хр╡╝р┤Хр╡Нр┤Хр┤╛р┤пр┤┐ ЁЯТЪ р┤Йр┤кр┤пр╡Лр┤Чр┤┐р┤Ър╡Нр┤Ър╡Н р┤ир┤┐р╡╝р┤ор╡Нр┤ор┤┐р┤Ър╡Нр┤Ър┤др╡Н | р┤╣р┤╛р┤Хр╡Нр┤Хр┤др╡Нр┤др╡║ 2024",
      empower: "р┤Хр╡Гр┤др╡Нр┤░р┤┐р┤о р┤мр╡Бр┤жр╡Нр┤зр┤┐р┤пр┤┐р┤▓р╡Вр┤Яр╡Ж р┤Хр╡Гр┤╖р┤┐р┤пр╡Ж р┤╢р┤╛р┤Хр╡Нр┤др╡Ар┤Хр┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б",
      copyright: "┬й 2024 р┤Хр╡Зр┤░ р┤лр┤╛р┤В р┤ор┤┐р┤др╡Нр┤░. р┤Ор┤▓р╡Нр┤▓р┤╛ р┤Ер┤╡р┤Хр┤╛р┤╢р┤Щр╡Нр┤Щр┤│р╡Бр┤В р┤╕р┤Вр┤░р┤Хр╡Нр┤╖р┤┐р┤др┤В."
    };
    
    return res.status(200).json({ translations: malayalamTranslations });
  }

  // For Tamil, add basic translations
  if (target === 'ta') {
    const tamilTranslations = {
      heroTitle: "роХрпЗро░ро│ ро╡ро┐ро╡роЪро╛ропро┐роХро│ро┐ройрпН AI роЙродро╡ро┐ропро╛ро│ро░рпН",
      heroDesc: "AI роорпВро▓роорпН роЙроЯройроЯро┐, роЕро▒ро┐ро╡рпБро│рпНро│ ро╡ро┐ро╡роЪро╛роп роЖро▓рпЛроЪройрпИропрпИрокрпН рокрпЖро▒рпБроЩрпНроХро│рпН. роЙроЩрпНроХро│рпН ро╡ро┐ро░рпБрокрпНрокрооро╛рой роорпКро┤ро┐ропро┐ро▓рпН роХрпЗро│рпНро╡ро┐роХро│рпИроХрпН роХрпЗроЯрпНроЯрпБ роХрпЗро░ро│ро╛ро╡ро┐ройрпН родройро┐родрпНродрпБро╡рооро╛рой ро╡ро┐ро╡роЪро╛роп роиро┐ро▓рпИроорпИроХро│рпБроХрпНроХро╛рой родройро┐рокрпНрокроЯрпНроЯ родрпАро░рпНро╡рпБроХро│рпИрокрпН рокрпЖро▒рпБроЩрпНроХро│рпН.",
      cta: "роХрпЗро│рпНро╡ро┐роХро│рпН роХрпЗроЯрпНроХ роЖро░роорпНрокро┐роХрпНроХро╡рпБроорпН тЖТ",
      whyTitle: "роПройрпН роХрпЗро░ роГрокро╛ро░рпНроорпН рооро┐родрпНро░ро╛ро╡рпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН?",
      whyDesc: "роорпЗроорпНрокроЯрпНроЯ AI родрпКро┤ро┐ро▓рпНроирпБроЯрпНрокроорпН рокро╛ро░роорпНрокро░ро┐роп роХрпЗро░ро│ ро╡ро┐ро╡роЪро╛роп роЕро▒ро┐ро╡рпБроЯройрпН роЗрогрпИроирпНродрпБ роЙроЩрпНроХро│рпБроХрпНроХрпБ роЪро┐ро▒роирпНрод ро╡ро┐ро╡роЪро╛роп ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпИ ро╡ро┤роЩрпНроХрпБроХро┐ро▒родрпБ.",
      multiLang: "рокро▓ роорпКро┤ро┐ роЖродро░ро╡рпБ",
      askTitle: "роЙроЩрпНроХро│рпН ро╡ро┐ро╡роЪро╛роп роХрпЗро│рпНро╡ро┐ропрпИроХрпН роХрпЗро│рпБроЩрпНроХро│рпН",
      askDesc: "роОроирпНродро╡рпКро░рпБ ро╡ро┐ро╡роЪро╛ропроорпН родрпКроЯро░рпНрокро╛рой ро╡ро┐ройро╡ро▓ро┐ро▓рпБроорпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роОроЩрпНроХро│рпН AI роЙродро╡ро┐ропро╛ро│ро░рпН родропро╛ро░ро╛роХ роЙро│рпНро│родрпБ",
      aiAnswer: "AI рокродро┐ро▓рпН:",
      techTitle: "AI роорпВро▓роорпН роХрпЗро░ро│ ро╡ро┐ро╡роЪро╛ропро┐роХро│рпИ роорпЗроорпНрокроЯрпБродрпНродрпБродро▓рпН",
      techDesc: "роОроЩрпНроХро│рпН AI роЙродро╡ро┐ропро╛ро│ро░рпН роЕродро┐роиро╡рпАрой родрпКро┤ро┐ро▓рпНроирпБроЯрпНрокродрпНродрпИ роХрпЗро░ро│ро╛ро╡ро┐ройрпН ро╡ро┐ро╡роЪро╛роп роироЯрпИроорпБро▒рпИроХро│ро┐ройрпН роЖро┤рооро╛рой роЕро▒ро┐ро╡рпБроЯройрпН роЗрогрпИроХрпНроХро┐ро▒родрпБ.",
      cropGuidance: "роХрпЗро░ро│ро╛ро╡ро┐ройрпН роХро╛ро▓роиро┐ро▓рпИроХрпНроХро╛рой рокропро┐ро░рпН-роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпН",
      support: "24/7 AI-роЗропроЩрпНроХрпБроорпН роЖродро░ро╡рпБ",
      multiLangFeature: "рокро▓ роорпКро┤ро┐ родрпКроЯро░рпНрокрпБ",
      built: "роХрпЗро░ро│ ро╡ро┐ро╡роЪро╛ропро┐роХро│рпБроХрпНроХро╛роХ ЁЯТЪ роЙроЯройрпН роХроЯрпНроЯрокрпНрокроЯрпНроЯродрпБ | ро╣ро╛роХрпНроХродрпНродро╛ройрпН 2024",
      empower: "роЪрпЖропро▒рпНроХрпИ роирпБрогрпНрогро▒ро┐ро╡рпБ роорпВро▓роорпН ро╡ро┐ро╡роЪро╛ропродрпНродрпИ роорпЗроорпНрокроЯрпБродрпНродрпБродро▓рпН",
      copyright: "┬й 2024 роХрпЗро░ роГрокро╛ро░рпНроорпН рооро┐родрпНро░ро╛. роЕройрпИродрпНродрпБ роЙро░ро┐роорпИроХро│рпБроорпН рокро╛родрпБроХро╛роХрпНроХрокрпНрокроЯрпБроХро┐ройрпНро▒рой."
    };
    
    return res.status(200).json({ translations: tamilTranslations });
  }

  // For Telugu, add basic translations  
  if (target === 'te') {
    const teluguTranslations = {
      heroTitle: "р░Хр▒Зр░░р░│ р░░р▒Ир░др▒Бр░▓ AI р░╕р░╣р░╛р░пр░Хр▒Бр░бр▒Б",
      heroDesc: "AI р░жр▒Нр░╡р░╛р░░р░╛ р░др░Хр▒Нр░╖р░г, р░др▒Жр░▓р░┐р░╡р▒Ир░и р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░▓р░╣р░╛р░▓р░ир▒Б р░кр▒Кр░Вр░жр░Вр░бр░┐. р░ор▒А р░Зр░╖р▒Нр░Яр░ор▒Ир░и р░нр░╛р░╖р░▓р▒Л р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░Ер░бр░┐р░Чр░┐ р░Хр▒Зр░░р░│ р░пр▒Кр░Хр▒Нр░Х р░кр▒Нр░░р░др▒Нр░пр▒Зр░Хр░ор▒Ир░и р░╡р▒Нр░пр░╡р░╕р░╛р░п р░кр░░р░┐р░╕р▒Нр░ер░┐р░др▒Бр░▓р░Хр▒Б р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д р░кр░░р░┐р░╖р▒Нр░Хр░╛р░░р░╛р░▓р░ир▒Б р░кр▒Кр░Вр░жр░Вр░бр░┐.",
      cta: "р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░Ер░бр░Чр░бр░В р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░Вр░бр░┐ тЖТ",
      whyTitle: "р░Хр▒Зр░░ р░лр░╛р░░р▒Нр░ор▒Н р░ор░┐р░др▒Нр░░р░ир▒Б р░Ор░Вр░жр▒Бр░Хр▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░╡р░╛р░▓р░┐?",
      whyDesc: "р░Ер░зр▒Бр░ир░╛р░др░и AI р░╕р░╛р░Вр░Хр▒Зр░др░┐р░Хр░д р░╕р░╛р░Вр░кр▒Нр░░р░жр░╛р░п р░Хр▒Зр░░р░│ р░╡р▒Нр░пр░╡р░╕р░╛р░п р░Ьр▒Нр░Юр░╛р░ир░Вр░др▒Л р░Хр░▓р░┐р░╕р░┐ р░ор▒Ар░Хр▒Б р░Йр░др▒Нр░др░о р░╡р▒Нр░пр░╡р░╕р░╛р░п р░ор░╛р░░р▒Нр░Чр░жр░░р▒Нр░╢р░ир░╛р░ир▒Нр░ир░┐ р░Ер░Вр░жр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐.",
      multiLang: "р░мр░╣р▒Бр░нр░╛р░╖р░╛ р░ор░жр▒Нр░жр░др▒Б",
      askTitle: "р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░кр▒Нр░░р░╢р▒Нр░ир░ир▒Б р░Ер░бр░Чр░Вр░бр░┐",
      askDesc: "р░Пр░жр▒Ир░ир░╛ р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В р░╕р░Вр░мр░Вр░зр░┐р░д р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Л р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░ор░╛ AI р░╕р░╣р░╛р░пр░Хр▒Бр░бр▒Б р░╕р░┐р░жр▒Нр░зр░Вр░Чр░╛ р░Йр░ир▒Нр░ир░╛р░бр▒Б",
      aiAnswer: "AI р░╕р░ор░╛р░зр░╛р░ир░В:",
      techTitle: "AI р░др▒Л р░Хр▒Зр░░р░│ р░░р▒Ир░др▒Бр░▓р░ир▒Б р░╢р░Хр▒Нр░др░┐р░╡р░Вр░др░В р░Ър▒Зр░пр░бр░В",
      techDesc: "р░ор░╛ AI р░╕р░╣р░╛р░пр░Хр▒Бр░бр▒Б р░Ер░др▒Нр░пр░╛р░зр▒Бр░ир░┐р░Х р░╕р░╛р░Вр░Хр▒Зр░др░┐р░Хр░др░ир▒Б р░Хр▒Зр░░р░│ р░╡р▒Нр░пр░╡р░╕р░╛р░п р░кр░жр▒Нр░зр░др▒Бр░▓ р░▓р▒Лр░др▒Ир░и р░Ьр▒Нр░Юр░╛р░ир░Вр░др▒Л р░Хр░▓р▒Бр░кр▒Бр░др░╛р░бр▒Б.",
      cropGuidance: "р░Хр▒Зр░░р░│ р░╡р░╛р░др░╛р░╡р░░р░гр░╛р░ир░┐р░Хр░┐ р░кр░Вр░Я-р░ир░┐р░░р▒Нр░жр░┐р░╖р▒Нр░Я р░ор░╛р░░р▒Нр░Чр░жр░░р▒Нр░╢р░ир░В",
      support: "24/7 AI-р░╢р░Хр▒Нр░др░┐р░др▒Л р░ор░жр▒Нр░жр░др▒Б",
      multiLangFeature: "р░мр░╣р▒Бр░нр░╛р░╖р░╛ р░Хр░ор▒Нр░пр▒Вр░ир░┐р░Хр▒Зр░╖р░ир▒Н",
      built: "р░Хр▒Зр░░р░│ р░░р▒Ир░др▒Бр░▓ р░Хр▒Лр░╕р░В ЁЯТЪ р░др▒Л р░ир░┐р░░р▒Нр░ор░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐ | р░╣р▒Нр░пр░╛р░Хр░ер░╛р░ир▒Н 2024",
      empower: "р░Хр▒Гр░др▒Нр░░р░┐р░о р░ор▒Зр░зр░╕р▒Нр░╕р▒Б р░жр▒Нр░╡р░╛р░░р░╛ р░╡р▒Нр░пр░╡р░╕р░╛р░пр░╛р░ир▒Нр░ир░┐ р░╢р░Хр▒Нр░др░┐р░╡р░Вр░др░В р░Ър▒Зр░пр░бр░В",
      copyright: "┬й 2024 р░Хр▒Зр░░ р░лр░╛р░░р▒Нр░ор▒Н р░ор░┐р░др▒Нр░░. р░Ер░ир▒Нр░ир▒А р░╣р░Хр▒Нр░Хр▒Бр░▓р▒Б р░░р░Хр▒Нр░╖р░┐р░Вр░Ър░мр░бр▒Нр░бр░╛р░пр░┐."
    };
    
    return res.status(200).json({ translations: teluguTranslations });
  }

  // List of LibreTranslate instances to try
  const instances = [
    'https://translate.argosopentech.com',
    'https://libretranslate.de',
    'https://libretranslate.com'
  ];
  
  try {
    const translations = {};
    
    // Try each instance until one works
    let workingInstance = null;
    for (const instance of instances) {
      try {
        const testResponse = await fetch(`${instance}/languages`, {
          method: 'GET',
          headers: { 'Accept': 'application/json' }
        });
        
        if (testResponse.ok && testResponse.headers.get('content-type')?.includes('application/json')) {
          workingInstance = instance;
          break;
        }
      } catch (error) {
        console.log(`Instance ${instance} not available:`, error.message);
        continue;
      }
    }

    if (!workingInstance) {
      console.log('No LibreTranslate instances available, using fallback translations');
      
      // Fallback: Basic translations for Hindi
      if (target === 'hi') {
        const hindiTranslations = {
          heroTitle: "рдХреЗрд░рд▓ рдХрд┐рд╕рд╛рдиреЛрдВ рдХрд╛ AI рд╕рд╣рд╛рдпрдХ",
          heroDesc: "AI рджреНрд╡рд╛рд░рд╛ рд╕рдВрдЪрд╛рд▓рд┐рдд рддрддреНрдХрд╛рд▓, рдмреБрджреНрдзрд┐рдорд╛рди рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛ рдореЗрдВ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ рдФрд░ рдХреЗрд░рд▓ рдХреА рдЕрдиреВрдареА рдХреГрд╖рд┐ рдкрд░рд┐рд╕реНрдерд┐рддрд┐рдпреЛрдВ рдХреЗ рд▓рд┐рдП рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рдорд╛рдзрд╛рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред",
          cta: "рдкреНрд░рд╢реНрди рдкреВрдЫрдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ тЖТ",
          whyTitle: "рдХреЗрд░рд╛ рдлрд╛рд░реНрдо рдорд┐рддреНрд░ рдХреНрдпреЛрдВ рдЪреБрдиреЗрдВ?",
          whyDesc: "рдЙрдиреНрдирдд AI рддрдХрдиреАрдХ рдкрд╛рд░рдВрдкрд░рд┐рдХ рдХреЗрд░рд▓ рдХреГрд╖рд┐ рдЬреНрдЮрд╛рди рд╕реЗ рдорд┐рд▓рдХрд░ рдЖрдкрдХреЛ рд╕рд░реНрд╡реЛрддреНрддрдо рдХреГрд╖рд┐ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рджрд╛рди рдХрд░рддреА рд╣реИред",
          multiLang: "рдмрд╣реБ-рднрд╛рд╖рд╛ рд╕рдорд░реНрдерди",
          askTitle: "рдЕрдкрдирд╛ рдХреГрд╖рд┐ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ",
          askDesc: "рд╣рдорд╛рд░рд╛ AI рд╕рд╣рд╛рдпрдХ рдХрд┐рд╕реА рднреА рдХреГрд╖рд┐ рд╕рдВрдмрдВрдзреА рдкреНрд░рд╢реНрди рдореЗрдВ рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИ",
          aiAnswer: "AI рдЙрддреНрддрд░:",
          techTitle: "AI рдХреЗ рд╕рд╛рде рдХреЗрд░рд▓ рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рд╕рд╢рдХреНрдд рдмрдирд╛рдирд╛",
          techDesc: "рд╣рдорд╛рд░рд╛ AI рд╕рд╣рд╛рдпрдХ рдЕрддреНрдпрд╛рдзреБрдирд┐рдХ рддрдХрдиреАрдХ рдХреЛ рдХреЗрд░рд▓ рдХреА рдХреГрд╖рд┐ рдкреНрд░рдерд╛рдУрдВ рдХреЗ рдЧрд╣рд░реЗ рдЬреНрдЮрд╛рди рдХреЗ рд╕рд╛рде рдЬреЛрдбрд╝рддрд╛ рд╣реИред",
          cropGuidance: "рдХреЗрд░рд▓ рдХреА рдЬрд▓рд╡рд╛рдпреБ рдХреЗ рд▓рд┐рдП рдлрд╕рд▓-рд╡рд┐рд╢рд┐рд╖реНрдЯ рдорд╛рд░реНрдЧрджрд░реНрд╢рди",
          support: "24/7 AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рд╕рдорд░реНрдерди",
          multiLangFeature: "рдмрд╣реБ-рднрд╛рд╖рд╛ рд╕рдВрдЪрд╛рд░",
          built: "рдХреЗрд░рд▓ рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП ЁЯТЪ рдХреЗ рд╕рд╛рде рдмрдирд╛рдпрд╛ рдЧрдпрд╛ | рд╣реИрдХрдереЙрди 2024",
          empower: "рдХреГрддреНрд░рд┐рдо рдмреБрджреНрдзрд┐рдорддреНрддрд╛ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдХреГрд╖рд┐ рдХреЛ рд╕рд╢рдХреНрдд рдмрдирд╛рдирд╛",
          copyright: "┬й 2024 рдХреЗрд░рд╛ рдлрд╛рд░реНрдо рдорд┐рддреНрд░ред рд╕рднреА рдЕрдзрд┐рдХрд╛рд░ рд╕реБрд░рдХреНрд╖рд┐рддред"
        };
        
        return res.status(200).json({ translations: hindiTranslations });
      }
      
      // For other languages, return original English text
      return res.status(200).json({ translations: texts });
    }

    // Process translations with working instance
    for (const [key, value] of Object.entries(texts)) {
      if (!value || value.trim() === '') {
        translations[key] = value;
        continue;
      }

      try {
        const response = await fetch(`${workingInstance}/translate`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({
            q: value,
            source: 'en',
            target: targetLang,
            format: 'text'
          })
        });

        if (!response.ok) {
          console.warn(`Translation failed for ${key}: ${response.statusText}`);
          translations[key] = value; // Fallback to original text
          continue;
        }

        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
          console.warn(`Invalid response type for ${key}: ${contentType}`);
          translations[key] = value; // Fallback to original text
          continue;
        }

        const data = await response.json();
        translations[key] = data.translatedText || value;
        
        // Small delay to be respectful to the free service
        await new Promise(resolve => setTimeout(resolve, 200));
        
      } catch (error) {
        console.warn(`Translation error for ${key}:`, error.message);
        translations[key] = value; // Fallback to original text
      }
    }

    res.status(200).json({ translations });
    
  } catch (error) {
    console.error('Translation service error:', error);
    // Return original texts as fallback
    res.status(200).json({ translations: texts });
  }
}
